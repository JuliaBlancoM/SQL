/*Ejercicio 1*/
/*Crear una base de datos con el nombre tarea_ucm.*/

CREATE DATABASE TAREA_UCM;

/*Crear un esquema de base de datos con el nombre operaciones*/

CREATE OR REPLACE SCHEMA TAREA_UCM.OPERACIONES_UCM;

/*Creamos las tres tablas correspondientes a los 3 archivos: orders, refunds y merchants.
Recuerda seleccionar el tipo de dato más adecuado para cada uno de los campos de las tres
tablas.*/

CREATE TABLE tarea_ucm.operaciones_ucm.orders
(
order_id varchar(50),
created_at DATE,
status varchar(50),
amount FLOAT,
refunded_at DATE,
merchant_id varchar(50),
country varchar(50)
);

CREATE TABLE tarea_ucm.operaciones_ucm.refunds
(
order_id varchar(50),
refunded_at DATE,
amount FLOAT
);

CREATE TABLE tarea_ucm.operaciones_ucm.merchants
(
merchant_id varchar(50),
name varchar(50)
);

/*Ejercicio 2*/
/*1. Realizamos una consulta donde obtengamos por país y estado de operación, el total de
operaciones y su importe promedio. La consulta debe cumplir las siguientes condiciones:
a. Operaciones posteriores al 01-07-2015.
b. Operaciones realizadas en Francia, Portugal y España.
c. Operaciones con un valor mayor de 100 € y menor de 1500€.
Ordenamos los resultados por el promedio del importe de manera descendente.*/

SELECT * FROM "TAREA_UCM"."OPERACIONES_UCM"."ORDERS";

SELECT COUNTRY, STATUS, COUNT(AMOUNT) AS TOTALOP, AVG(AMOUNT) AS AVGOP
FROM "TAREA_UCM"."OPERACIONES_UCM"."ORDERS"
WHERE CREATED_AT>'2015-07-01'
AND COUNTRY LIKE 'Francia' or COUNTRY LIKE 'Portugal' or COUNTRY LIKE 'España'
AND AMOUNT BETWEEN 100 AND 1500
GROUP BY 1,2
ORDER BY AVGOP DESC;

/*2. Realizamos una consulta donde obtengamos los 3 países con el mayor número de
operaciones, el total de operaciones, la operación con un valor máximo y la operación con
el valor mínimo para cada país. La consulta debe cumplir las siguientes condiciones:
a. Excluimos aquellas operaciones con el estado “Delinquent” y “Cancelled”.
b. Operaciones con un valor mayor de 100 €.*/

SELECT TOP 3 COUNTRY, COUNT(AMOUNT) AS TOTALOP, MAX(AMOUNT) AS MAXOP, MIN(AMOUNT) AS MINOP
FROM "TAREA_UCM"."OPERACIONES_UCM"."ORDERS"
WHERE STATUS!='DELINQUENT' AND STATUS!='CANCELLED'
AND AMOUNT>100
GROUP BY 1;

/*Ejercicio 3*/
/*1. Realizamos una consulta donde obtengamos, por país y comercio, el total de operaciones, su valor promedio y el total de devoluciones. La consulta debe cumplir las siguientes condiciones:
a. Se debe mostrar el nombre y el id del comercio.
b. Comercios con más de 10 ventas.
c. Comercios de Marruecos, Italia, España y Portugal.
d. Creamos un campo que identifique si el comercio acepta o no devoluciones. Si no acepta (total de devoluciones es igual a cero) el campo debe contener el valor “No” y si sí lo acepta (total de devoluciones es mayor que cero) el campo debe contener el valor “Sí”. Llamaremos al campo “acepta_devoluciones”.
Ordenamos los resultados por el total de operaciones de manera ascendente.*/

SELECT A.COUNTRY, B.NAME, A.MERCHANT_ID, COUNT(AMOUNT) AS TOTALOP, AVG(AMOUNT) AS AVGOP, COUNT(REFUNDED_AT) AS TOTALREF,
CASE
WHEN TOTALREF=0 THEN 'No'
WHEN TOTALREF>0 THEN 'Sí'
ELSE 'Error'
END AS ACEPTA_DEVOLUCIONES
FROM "TAREA_UCM"."OPERACIONES_UCM"."ORDERS" A
INNER JOIN "TAREA_UCM"."OPERACIONES_UCM"."MERCHANTS" B
ON A.MERCHANT_ID=B.MERCHANT_ID
WHERE COUNTRY LIKE 'Marruecos' or COUNTRY LIKE 'Italia' or COUNTRY LIKE 'España' or COUNTRY LIKE 'Portugal'
GROUP BY 1,2,3
HAVING TOTALOP>10
ORDER BY TOTALOP ASC;

/*2. Realizamos una consulta donde vamos a traer todos los campos de las tablas operaciones y comercios. De la tabla devoluciones vamos a traer el conteo de devoluciones por operación y la suma del valor de las devoluciones.
Una vez tengamos la consulta anterior, creamos una vista con el nombre orders_view
dentro del esquema tarea_ucm con esta consulta.*/

SELECT o.order_id, o.created_at, o.status, o.amount, r.totaldev, r.sumdev, m.name
FROM tarea_ucm.operaciones_ucm.orders o
LEFT JOIN (
    SELECT order_id, COUNT(amount) AS totaldev, SUM(amount) AS sumdev
    FROM tarea_ucm.operaciones_ucm.refunds
    GROUP BY 1
) r ON o.order_id = r.order_id
INNER JOIN tarea_ucm.operaciones_ucm.merchants m ON o.merchant_id = m.merchant_id;

CREATE VIEW orders_view AS
SELECT o.order_id, o.created_at, o.status, o.amount, r.totaldev, r.sumdev, m.name
FROM tarea_ucm.operaciones_ucm.orders o
LEFT JOIN (
    SELECT order_id, COUNT(amount) AS totaldev, SUM(amount) AS sumdev
    FROM tarea_ucm.operaciones_ucm.refunds
    GROUP BY 1
) r ON o.order_id = r.order_id
INNER JOIN tarea_ucm.operaciones_ucm.merchants m ON o.merchant_id = m.merchant_id;